generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @default(now()) @map("updated_at")
  role                   UserRole        @default(USER)
  stripeCustomerId       String?         @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?         @unique @map("stripe_subscription_id")
  stripePriceId          String?         @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?       @map("stripe_current_period_end")
  questionnaires         Questionnaire[]
  videoRequests          VideoRequest[]
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Questionnaire {
  id            String         @id @default(cuid())
  userId        String
  answers       Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoRequests VideoRequest[]

  @@index([userId])
}

model VideoRequest {
  id              String        @id @default(cuid())
  userId          String
  questionnaireId String
  storytellerId   String
  status          String        @default("pending")
  script          String?       @db.Text
  s3BasePath      String?       @db.Text
  captions        String?       @db.Text
  srtPath         String?       @db.Text
  testVideoPath   String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  frameKeys        String[]      @db.Text

  @@index([userId])
  @@index([questionnaireId])
  @@index([storytellerId])
}

model Storyteller {
  id          String   @id @default(cuid())
  name        String
  imageUrl    String   @db.Text
  s3ImageKey  String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}
